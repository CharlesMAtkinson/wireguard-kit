#! /bin/bash

# Copyright (C) 2022 Charles Atkinson
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

# Purpose: install Wireguard client
#   * To be run on the client
#   * apt-get install linux-headers-amd64 linux-headers-$(uname -r)
#   * apt-get install wireguard wireguard-dkms
#   * modprobe wireguard
#   * lsmod | grep wireguard (test)
#   * mkdir -p /etc/wireguard

# Usage:
#   See usage.fun or use -h option

# Programmers' notes: function call tree
#    +
#    |
#    +-- initialise
#    |
#    +-- install_client
#    |
#    +-- finalise
#
# Utility functions called from various places:
#    ck_uint msg

# Function definitions in alphabetical order.  Execution begins after the last function definition.

#--------------------------
# Name: ck_uint
# Purpose: checks for a valid unsigned integer
# Usage: ck_uint <putative uint>
# Outputs: none
# Returns:
#   0 when $1 is a valid unsigned integer
#   1 otherwise
#--------------------------
function ck_uint {
    local regex='^[[:digit:]]+$'
    [[ $1 =~ $regex ]] && return 0 || return 1
}  #  end of function ck_uint

#--------------------------
# Name: fct
# Purpose: function call trace (for debugging)
# $1 - name of calling function
# $2 - message.  If it starts with "started" or "returning" then the output is prettily indented
#--------------------------
function fct {

    if [[ ! $debugging_flag ]]; then
        return 0
    fi

    fct_indent="${fct_indent:=}"

    case $2 in
        'started'* )
            fct_indent="$fct_indent  "
            msg D "$fct_indent$1: $2"
            ;;
        'returning'* )
            msg D "$fct_indent$1: $2"
            fct_indent="${fct_indent#  }"
            ;;
        * )
            msg D "$fct_indent$1: $2"
    esac
}  # end of function fct

#--------------------------
# Name: finalise
# Purpose: cleans up and exits
# Arguments:
#    $1  exit code
# Exit code:
#   When not terminated by a signal, the sum of zero plus
#      1 when any warnings
#      2 when any errors
#   When terminated by a trapped signal, the sum of 128 plus the signal number
#--------------------------
function finalise {
    local my_exit_code sig_name

    finalising_flag=$true

    # Interrupted?
    # ~~~~~~~~~~~~
    my_exit_code=0
    if ck_uint "${1:-}"; then
        if (($1>128)); then    # Trapped interrupt
            interrupt_flag=$true
            i=$((128+${#sig_names[*]}))    # Max valid interrupt code
            if (($1<i)); then
                my_exit_code=$1
                sig_name=${sig_names[$1-128]}
                msg I "Finalising on $sig_name"
                [[ ${summary_fn:-} != '' ]] \
                    && echo "Finalising on $sig_name" >> "$summary_fn"
            else
               msg="${FUNCNAME[0]} called with invalid exit value '${1:-}'"
               msg+=" (> max valid interrupt code $i)"
               msg E "$msg"    # Returns because finalising_flag is set
            fi
        fi
    fi

    # Exit code value adjustment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ ! $interrupt_flag ]]; then
        if [[ $warning_flag ]]; then
            msg I "There was at least one WARNING"
            ((my_exit_code+=1))
        fi
        if [[ $error_flag ]]; then
            msg I "There was at least one ERROR"
            ((my_exit_code+=2))
        fi
        if ((my_exit_code==0)) && ((${1:-0}!=0)); then
            msg='There was an error not reported in detail'
            msg+=' (probably by ... || finalise 1)'
            msg E "$msg"
            my_exit_code=2
        fi
    else
        msg I "There was a $sig_name interrupt"
    fi

    # Exit
    # ~~~~
    exit $my_exit_code
}  # end of function finalise

#--------------------------
# Name: initialise
# Purpose: sets up environment
#--------------------------
function initialise {
    local args buf emsg

    # Configure shell environment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    export LANG=en_GB.UTF-8
    export LANGUAGE=en_GB.UTF-8
    for var_name in LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
        LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
        LC_TELEPHONE LC_TIME
    do
        unset $var_name
    done

    export PATH=/usr/sbin:/sbin:/usr/bin:/bin
    IFS=$' \n\t'
    set -o nounset
    shopt -s extglob            # Enable extended pattern matching operators
    unset CDPATH                # Ensure cd behaves as expected
    umask 022

    # Initialise some global logic variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    readonly false=
    readonly true=true

    debugging_flag=$false
    error_flag=$false
    finalising_flag=$false
    interrupt_flag=$false
    logging_flag=$false
    quiet_flag=$false
    warning_flag=$false

    # Set global read-only non-logic variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    declare -gr msg_lf=$'\n    '
    declare -gr my_pid=$$
    declare -gr my_name=${0##*/}
    declare -gr sig_names=(. $(kill -L | sed 's/[[:digit:]]*)//g'))
    declare -gr wg_conf_dir=/etc/wireguard

    declare -gr log_dir=/var/log/${my_name%.sh}

    # Parse command line
    # ~~~~~~~~~~~~~~~~~~
    args=("$@")
    args_org="$*"
    emsg=
    opt_q_flag=$false
    while getopts :dhq opt "$@"
    do
        case $opt in
            d )
                debugging_flag=$true
                ;;
            h )
                debugging_flag=$false
                usage verbose
                exit 0
                ;;
            q )
                quiet_flag=$true
                ;;
            * )
                emsg+=$msg_lf"Invalid option '-$opt'"
        esac
    done

    # Check for mandatory options missing
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # There are no mandatory options

    # Test for mutually exclusive options
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # There are no mutually exclusive options

    # Validate option values
    # ~~~~~~~~~~~~~~~~~~~~~~
    # There are no option values

    # Test for extra arguments
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    shift $(($OPTIND-1))
    if [[ $* != '' ]]; then
        emsg+=$msg_lf"Invalid extra argument(s) '$*'"
    fi

    # Report any command line errors
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ $emsg != '' ]]; then
        emsg+=$msg_lf'(-h for help)'
        msg E "Command line error(s)$emsg"
    fi

    # Set up logging
    # ~~~~~~~~~~~~~~
    mkdir -p "$log_dir" || finalise1
    log_fn=$log_dir/$(date +%Y-%m-%d@%H:%M:%S).log
    touch "$log_fn" || finalise 1
    exec 11<&1    # Save stdout redirection
    exec 12<&2    # Save stderr redirection
    exec &>"$log_fn"
    fct "${FUNCNAME[0]}" 'started (this message delayed until logging set up)'
    msg I "$my_name: PID: $$, PPID: $PPID, args: $args_org"

    # Set traps
    # ~~~~~~~~~
    for ((i=1;i<${#sig_names[*]};i++))
    do
        ((i==9)) && continue     # SIGKILL
        ((i==17)) && continue    # SIGCHLD
        trap "finalise $((128+i))" ${sig_names[i]#SIG}
    done
}  # end of function initialise

#--------------------------
# Name: install_client
# Purpose: installs Wireguard
#--------------------------
function install_client {
    local buf cmd msg

    export DEBIAN_FRONTEND=noninteractive
    msg I 'Running apt-get update'
    apt-get update
    (($?!=0)) && msg E 'apt-get update failed'
    msg I 'Installing kernel headers packages'
    apt-get --yes install linux-headers-amd64 linux-headers-$(uname -r)
    (($?!=0)) && msg E 'Failed to install kernel headers packages'
    msg I 'Installing wireguard packages'
    apt-get --yes install wireguard wireguard-dkms
    (($?!=0)) && msg E 'Failed to install wireguard packages'
    msg I 'Ensuring kernel module loaded'
    modprobe wireguard
    buf=$(lsmod | grep wireguard)
    if [[ $buf = '' ]]; then
        msg E 'module wireguard not loaded'
    fi
    msg I "Creating $wg_conf_dir"
    mkdir -p "$wg_conf_dir" || msg E "Unable to create $wg_conf_dir"
    chmod 700 "$wg_conf_dir" || msg E "Unable to set $wg_conf_dir permissions"

}  # end of function install_client

#--------------------------
# Name: msg
# Purpose: generalised messaging interface
# Arguments:
#    $1 class: D, E, I or W indicating Debug, Error, Information or Warning
#    $2 message text
# Global variables read:
#     my_name
# Output: information messages to stdout; the rest to stderr
# Returns:
#   Does not return (calls finalise) when class is E for error
#   Otherwise returns 0
#--------------------------
function msg {
    local buf class message_text prefix priority

    # Process arguments
    # ~~~~~~~~~~~~~~~~~
    class="${1:-}"
    message_text="${2:-}"

    # Class-dependent set-up
    # ~~~~~~~~~~~~~~~~~~~~~~
    case "$class" in
        D )
            [[ ! $debugging_flag ]] && return
            prefix='DEBUG: '
            priority=
            ;;
        E )
            error_flag=$true
            prefix='ERROR: '
            priority=err
            ;;
        I )
            prefix=
            priority=info
            ;;
        W )
            warning_flag=$true
            prefix='WARN: '
            priority=warning
            ;;
        * )
            msg E "msg: invalid class '$class': '$*'"
    esac

    # Write to stdout or stderr
    # ~~~~~~~~~~~~~~~~~~~~~~~~~
    message_text="$prefix$message_text"
    if [[ $class = I ]]; then
        echo "$message_text"
        [[ ! $quiet_flag ]] && echo "$message_text" >&11
    else
        echo "$message_text" >&2
        [[ ! $quiet_flag ]] && echo "$message_text" >&12
        if [[ $class = E ]]; then
            quiet_flag=$false    # So next two I messages are displayed
            msg I "More information: $log_fn"
            msg I 'OK to try again by running /usr/local/sbin/install_wireguard_client.sh'
            [[ ! $finalising_flag ]] && finalise 1
        fi
    fi

    return 0
}  #  end of function msg

#--------------------------
# Name: usage
# Purpose: prints usage message
#--------------------------
function usage {
    fct "${FUNCNAME[0]}" 'started'
    local msg usage

    # Build the messages
    # ~~~~~~~~~~~~~~~~~~
    usage="usage: $my_name "
    msg='  where:'
    usage+=' [-d] [-h] [-q]'
    msg+=$'\n    -d debugging on'
    msg+=$'\n    -h prints this help and exits'
    msg+=$'\n    -q quiet.  Do not display display information and warning messages'
    msg+=$'\n'"  Installs WireGuard packages and kernel modules, creates $wg_conf_dir"

    # Display the message(s)
    # ~~~~~~~~~~~~~~~~~~~~~~
    echo "$usage" >&2
    if [[ ${1:-} != 'verbose' ]]; then
        echo "(use -h for help)" >&2
    else
        echo "$msg" >&2
    fi

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function usage

#--------------------------
# Name: main
# Purpose: where it all happens
#--------------------------
initialise "${@:-}"
install_client
finalise 0
