#! /bin/bash

# Copyright (C) 2022 Charles Michael Atkinson
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

# Purpose: Wireguard client administration
#   * To be run on the wireguard server
#   * Create /etc/wireguard/clients/<client_fqdn>/client.conf.  To be used as the client's /etc/wireguard/wg0.conf
#   * Create /etc/wireguard/clients/<client_fqdn>/server.conf.  To be used in the server's wireguard conf
#   * Update the server's wireguard conf and effect the change
#   * If client is ssh accessible
#       * Install Wireguard packages
#       * Install /etc/wireguard/wg0.conf
#       * Enable the Wireguard interfaces
#       * Test
#   * Else inform user /etc/wireguard/<client_fqdn>/client.conf needs to be deployed

# Usage:
#   See usage.fun or use -h option

# Programmers' notes: function call tree
#    +
#    |
#    +-- initialise
#    |   |
#    |   +-- usage
#    |
#    +-- create_client
#    |
#    +-- install_client
#    |
#    +-- remove_client
#    |
#    +-- finalise
#
# Utility functions called from various places:
#    ck_file ck_uint fct msg
# TODO: add any other utility functions in order above

# Function definitions in alphabetical order.  Execution begins after the last function definition.

#--------------------------
# Name: ck_file
# Purpose: for each file listed in the argument list: checks that it is 
#   * reachable and exists
#   * is of the type specified (block special, ordinary file or directory)
#   * has the requested permission(s) for the user
#   * optionally, is absolute (begins with /)
# Usage: ck_file [ path <file_type>:<permissions>[:[a]] ] ...
#   where 
#     file  is a file name (path)
#     file_type  is b (block special file), f (file) or d (directory)
#     permissions  is none or more of r, w and x
#     a  requests an absoluteness test (that the path begins with /)
#   Example:
#     buf=$(ck_file foo f:rw 2>&1)
#     if [[ $buf != '' ]]; then
#          msg W "$buf"
#          fct "${FUNCNAME[0]}" 'returning 1'
#          return 1
#     fi
# Outputs:
#   * For the first requested property each file does not have, a message to
#     stderr
#   * For the first detected programminng error, a message to
#     stderr
# Returns: 
#   0 when all files have the requested properties
#   1 when at least one of the files have the requested properties
#   2 when a programming error is detected
#--------------------------
function ck_file {

    local absolute_flag buf file_name file_type perm perms retval

    # For each file ...
    # ~~~~~~~~~~~~~~~~~
    retval=0
    while [[ $# -gt 0 ]]
    do  
        file_name=$1
        file_type=${2%%:*}
        buf=${2#$file_type:}
        perms=${buf%%:*}
        absolute=${buf#$perms:}
        [[ $absolute = $buf ]] && absolute=
        case $absolute in 
            '' | a )
                ;;
            * )
                echo "ck_file: invalid absoluteness flag in '$2' specified for file '$file_name'" >&2
                return 2
        esac
        shift 2

        # Is the file reachable and does it exist?
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        case $file_type in
            b ) 
                if [[ ! -b $file_name ]]; then
                    echo "file '$file_name' is unreachable, does not exist or is not a block special file" >&2
                    retval=1
                    continue
                fi  
                ;;  
            f ) 
                if [[ ! -f $file_name ]]; then
                    echo "file '$file_name' is unreachable, does not exist or is not an ordinary file" >&2
                    retval=1
                    continue
                fi  
                ;;  
            d ) 
                if [[ ! -d $file_name ]]; then
                    echo "directory '$file_name' is unreachable, does not exist or is not a directory" >&2
                    retval=1
                    continue
                fi
                ;;
            * )
                echo "Programming error: ck_file: invalid file type '$file_type' specified for file '$file_name'" >&2
                return 2
        esac

        # Does the file have the requested permissions?
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        buf="$perms"
        while [[ $buf ]]
        do
            perm="${buf:0:1}"
            buf="${buf:1}"
            case $perm in
                r )
                    if [[ ! -r $file_name ]]; then
                        echo "$file_name: no read permission" >&2
                        retval=1
                        continue
                    fi
                    ;;
                w )
                    if [[ ! -w $file_name ]]; then
                        echo "$file_name: no write permission" >&2
                        retval=1
                        continue
                    fi
                    ;;
                x )
                    if [[ ! -x $file_name ]]; then
                        echo "$file_name: no execute permission" >&2
                        retval=1
                        continue
                    fi
                    ;;
                * )
                    echo "Programming error: ck_file: invalid permisssion '$perm' requested for file '$file_name'" >&2
                    return 2
            esac
        done

        # Does the file have the requested absoluteness?
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        if [[ $absolute = a && ${file_name:0:1} != / ]]; then
            echo "$file_name: does not begin with /" >&2
            retval=1
        fi

    done

    return $retval

}  #  end of function ck_file

#--------------------------
# Name: ck_uint
# Purpose: checks for a valid unsigned integer
# Usage: ck_uint <putative uint>
# Outputs: none
# Returns: 
#   0 when $1 is a valid unsigned integer
#   1 otherwise
#--------------------------
function ck_uint {
    local regex='^[[:digit:]]+$'
    [[ $1 =~ $regex ]] && return 0 || return 1
}  #  end of function ck_uint

#--------------------------
# Name: create_client
# Purpose: creates a Wireguard client
#--------------------------
function create_client {
    fct "${FUNCNAME[0]}" 'started'
    local buf cmd msg rc
    local client_dir content privkey client_pubkey server_conf_fn

    # Generate keys
    # ~~~~~~~~~~~~~
    cmd=(wg genkey)
    privkey=$("${cmd[@]}" 2>&1)
    rc=$?
    if ((rc!=0)); then
        msg="Command: ${cmd[*]}"
        msg+=$'\n'"Return code: $rc"
        msg+=$'\n'"Output: $privkey"
        msg E "$msg"
    fi
    cmd=(wg pubkey)
    client_pubkey=$(echo "$privkey" | "${cmd[@]}" 2>&1)
    rc=$?
    if ((rc!=0)); then
        msg="Command: echo $privkey | ${cmd[*]}"
        msg+=$'\n'"Return code: $rc"
        msg+=$'\n'"Output: $client_pubkey"
        msg E "$msg"
    fi

    # Create /etc/wireguard/clients/<client_fqdn>.client.conf
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    [[ -f "$client_conf_fn" ]] && msg E "File $client_conf_fn already exists" 
    msg I "Creating $client_conf_fn"
    content='[Interface]'
    content+=$'\n'"Address = $ip_addr"
    content+=$'\n'"PrivateKey = $privkey"
    content+=$'\n'
    content+=$'\n[Peer]'
    content+=$'\n'"AllowedIPs = $network"
    content+=$'\n'"Endpoint = $endpoint"
    content+=$'\nPersistentKeepalive = 25'
    content+=$'\n'"PublicKey = $server_pubkey"
    echo "$content" > "$client_conf_fn" \
        || msg E "Unable to write to /etc/wireguard/clients/$fqdn.client.conf"
    
    # Create /etc/wireguard/clients/<client_fqdn>.server.conf
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    server_conf_fn=/etc/wireguard/clients/$fqdn.server.conf
    msg I "Creating $server_conf_fn"
    content='[Peer]'
    content+=$'\n'"# $fqdn"
    content+=$'\n'"PublicKey = $client_pubkey"
    content+=$'\n'"AllowedIPs = $ip_addr"
    echo "$content" > "$server_conf_fn" \
        || msg E "Unable to write to $server_conf_fn"

    # Add server.conf content to the server's conffile
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    msg I "Adding server.conf content to the server's conffile"
    echo >> "$server_conffile" || msg E "Unable to write to $server_conffile"
    cat "/etc/wireguard/clients/$fqdn.server.conf" >> "$server_conffile" || msg E "Unable to write to $server_conffile"

    # Effect the server's changed conffile
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    msg I "Effecting the server's changed conffile $server_conffile"
    wg-quick down "$server_interface"
    wg-quick up "$server_interface" || msg E "Unable to effect the changed $server_conffile"

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function create_client

#--------------------------
# Name: fct
# Purpose: function call trace (for debugging)
# $1 - name of calling function 
# $2 - message.  If it starts with "started" or "returning" then the output is prettily indented
#--------------------------
function fct {

    if [[ ! $debugging_flag ]]; then
        return 0
    fi

    fct_indent="${fct_indent:=}"

    case $2 in
        'started'* )
            fct_indent="$fct_indent  "
            msg D "$fct_indent$1: $2"
            ;;
        'returning'* )
            msg D "$fct_indent$1: $2"
            fct_indent="${fct_indent#  }"
            ;;
        * )
            msg D "$fct_indent$1: $2"
    esac
}  # end of function fct

#--------------------------
# Name: finalise
# Purpose: cleans up and exits
# Arguments:
#    $1  exit code
# Exit code: 
#   When not terminated by a signal, the sum of zero plus
#      1 when any warnings
#      2 when any errors
#   When terminated by a trapped signal, the sum of 128 plus the signal number
#--------------------------
function finalise {
    fct "${FUNCNAME[0]}" "started with args $*" 
    local my_exit_code sig_name

    finalising_flag=$true

    # Interrupted?
    # ~~~~~~~~~~~~
    my_exit_code=0
    if ck_uint "${1:-}"; then
        if (($1>128)); then    # Trapped interrupt
            interrupt_flag=$true
            i=$((128+${#sig_names[*]}))    # Max valid interrupt code
            if (($1<i)); then
                my_exit_code=$1
                sig_name=${sig_names[$1-128]}
                msg I "Finalising on $sig_name" 
                [[ ${summary_fn:-} != '' ]] \
                    && echo "Finalising on $sig_name" >> "$summary_fn" 
            else
               msg="${FUNCNAME[0]} called with invalid exit value '${1:-}'" 
               msg+=" (> max valid interrupt code $i)" 
               msg E "$msg"    # Returns because finalising_flag is set
            fi
        fi
    fi

    # Old log removal
    # ~~~~~~~~~~~~~~~
    if [[ ${log_fn_pat:-} != '' ]]; then
        buf=$(find "$log_dir" -name "$log_fn_pat" -mtime +$log_retention -execdir rm {} \; 2>&1)
        [[ $buf != '' ]] && msg W "Problem removing old logs: $buf" 
    fi
    
    # Exit code value adjustment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ ! $interrupt_flag ]]; then
        if [[ $warning_flag ]]; then
            msg I "There was at least one WARNING" 
            ((my_exit_code+=1))
        fi
        if [[ $error_flag ]]; then
            msg I "There was at least one ERROR" 
            ((my_exit_code+=2))
        fi
        if ((my_exit_code==0)) && ((${1:-0}!=0)); then
            msg='There was an error not reported in detail'
            msg+=' (probably by ... || finalise 1)'
            msg E "$msg" 
            my_exit_code=2
        fi
    else
        msg I "There was a $sig_name interrupt" 
    fi

    # Remove temporary directory
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~
    [[ $tmp_dir_created_flag \
        && ${tmp_dir:-} =~ $tmp_dir_regex \
    ]] && rm -fr "$tmp_dir" 

    # Remove PID file
    # ~~~~~~~~~~~~~~~
    [[ $pid_file_locked_flag ]] && rm "$pid_fn" 

    # Exit
    # ~~~~
    fct "${FUNCNAME[0]}" 'exiting'
    exit $my_exit_code
}  # end of function finalise

#--------------------------
# Name: initialise
# Purpose: sets up environment, parses command line, reads config file
#--------------------------
function initialise {
    local args buf emsg opt re
    local opt_f_flag opt_i_flag opt_l_flag opt_o_flag opt_q_flag
    local -r fqdn_re='^[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'
    local -r ip_addr_re='^[[:digit:]]+(\.[[:digit:]]+){3}$'

    # Ensure being run by root
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    if (($(id -u)!=0)); then
        echo 'This script must be run by root' >&2
        exit 1
    fi 

    # Configure shell environment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    export LANG=en_GB.UTF-8
    export LANGUAGE=en_GB.UTF-8
    for var_name in LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
        LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
        LC_TELEPHONE LC_TIME 
    do
        unset $var_name
    done

    export PATH=/usr/sbin:/sbin:/usr/bin:/bin
    IFS=$' \n\t'
    set -o nounset
    shopt -s extglob            # Enable extended pattern matching operators
    unset CDPATH                # Ensure cd behaves as expected
    umask 022

    # Initialise some global logic variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    readonly false=
    readonly true=true

    debugging_flag=$false
    error_flag=$false
    finalising_flag=$false
    interrupt_flag=$false
    logging_flag=$false
    no_client_install_flag=$false
    pid_file_locked_flag=$false
    quiet=$false
    tmp_dir_created_flag=$false
    warning_flag=$false

    # Set global read-only non-logic variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    declare -gr fn_date_format='%Y-%m-%d'
    declare -gr fn_date_regex='[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}'
    declare -gr log_date_format='+%H:%M:%S'
    declare -gr msg_lf=$'\n    '
    declare -gr my_pid=$$
    declare -gr pid_dir=/tmp
    declare -gr my_name=${0##*/}
    declare -gr sig_names=(. $(kill -L | sed 's/[[:digit:]]*)//g'))

    # Using variables set above
    declare -gr tmp_dir_mktemp_str=/tmp/$my_name.XXXXXX
    declare -gr tmp_dir_regex="^/tmp/$my_name\..{6}\$" 

    # Initialise some global non-logic variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    log_retention=28
    log_dir=/var/log/$my_name

    # Parse command line
    # ~~~~~~~~~~~~~~~~~~
    args=("$@")
    args_org="$*" 
    conf_fn=/etc/wireguard/$my_name.conf
    emsg=
    opt_f_flag=$false
    opt_i_flag=$false
    opt_I_flag=$false
    opt_l_flag=$false
    opt_q_flag=$false
    opt_r_flag=$false
    while getopts :c:df:hi:Ilnq opt "$@" 
    do
        case $opt in
            c )
                conf_fn=$OPTARG
                ;;
            d )
                debugging_flag=$true
                ;;
            f )
                opt_f_flag=$true
                fqdn=$OPTARG
                ;;
            h )
                debugging_flag=$false
                usage verbose
                exit 0
                ;;
            i )
                opt_i_flag=$true
                ip_addr=$OPTARG
                ;;
            I )
                opt_I_flag=$true
                ;;
            n )
                no_client_install_flag=$true
                ;;
            l )
                opt_l_flag=$true
                log_fn=/dev/tty
                ;;
            q )
                opt_q_flag=$true
                ;;
            : )
                emsg+=$msg_lf"Option $OPTARG must have an argument" 
                [[ $OPTARG = c ]] && { opt_c_flag=$true; conf_fn=/bin/bash; }
                ;;
            * )
                emsg+=$msg_lf"Invalid option '-$opt'" 
        esac
    done

    # Check for mandatory options missing
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    [[ ! $opt_f_flag ]] && emsg+=$msg_lf'Option -f is required'
    [[ ! $opt_i_flag ]] && emsg+=$msg_lf'Option -i is required'

    # Test for mutually exclusive options
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # There are no mutually exclusive options

    # Validate option values
    # ~~~~~~~~~~~~~~~~~~~~~~
    [[ ! -r "$conf_fn" ]] \
        && emsg+=$msg_lf"$conf_fn does not exist or is not readable" 
    if [[ $opt_f_flag ]]; then
        client_conf_fn=/etc/wireguard/clients/$fqdn.client.conf
        [[ ! $fqdn =~ $fqdn_re ]] && emsg+=$msg_lf"-f value '$fqdn' is not a valid FQDN"
    fi
    if [[ $opt_i_flag ]]; then
        [[ ! $ip_addr =~ $ip_addr_re ]] && emsg+=$msg_lf"-f value '$ip_addr' is not a valid IPv4 address"
    fi

    # Test for extra arguments
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    shift $(($OPTIND-1))
    if [[ $* != '' ]]; then
        emsg+=$msg_lf"Invalid extra argument(s) '$*'" 
    fi

    # Report any command line errors
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ $emsg != '' ]]; then
        emsg+=$msg_lf'(-h for help)'
        msg E "Command line error(s)$emsg" 
    fi

    # Set quiet
    # ~~~~~~~~~
    [[ $opt_l_flag && $opt_q_flag ]] && quiet=$true || quiet=$false

    # Check the PID directory
    # ~~~~~~~~~~~~~~~~~~~~~~~
    mkdir -p "$pid_dir" 2>/dev/null
    buf=$(ck_file "$pid_dir" d:rwx: 2>&1)
    [[ $buf != '' ]] && msg E "$buf" 

    # Read conffile
    # ~~~~~~~~~~~~~
    buf=$(ck_file "$conf_fn" f:r 2>&1)
    [[ $buf != '' ]] && msg E "$buf" 
    source "$conf_fn" 

    # Ensure required variables set by conffile
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    emsg=
    for varname in endpoint network server_conffile server_ip_addr server_pubkey
    do  
        [[ ${!varname:-} = '' ]] && emsg+=$msg_lf"$varname not set or empty" 
    done

    # Check confvalues
    # ~~~~~~~~~~~~~~~~
    if [[ ${server_conffile:-} != '' ]]; then 
        buf=$(ck_file "$server_conffile" f:r: 2>&1)
        [[ $buf != '' ]] && emsg+=$msg_lf"$buf" 
    fi

    # Set up logging
    # ~~~~~~~~~~~~~~
    if [[ ! $opt_l_flag ]]; then
        # Not logging to /dev/tty so set up logging to file
        log_fn=$log_dir/$my_name.$(date +%Y-%m-%d@%H:%M:%S).log
        buf=$(touch "$log_fn" 2>&1)
        if (($?>0)); then
            msg E "cannot create $log_fn: $buf"
        fi
        readonly log_fn_pat="$my_name.[^.]+\.log\$" 
    fi
    exec &>"$log_fn" 
    fct "${FUNCNAME[0]}" 'started (this message delayed until logging set up)'
    msg I "$my_name: PID: $$, PPID: $PPID, args: $args_org" 

    # Report any conf errors
    # ~~~~~~~~~~~~~~~~~~~~~~
    if [[ $emsg != '' ]]; then
        msg E "Conffile $conf_fn error(s)$emsg" 
    fi

    # Derive interface name from the server's conffile name
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    server_interface=${server_conffile##*/}
    server_interface=${server_interface%.conf}

    # Check IP address
    # ~~~~~~~~~~~~~~~~
    [[ $ip_addr = $server_ip_addr ]] && msg E "$ip_addr is the server's address"
    buf=$(grepcidr "$network" <(echo "$ip_addr"))
    rc=$?
    case $rc in
        0) ;;
        1) msg E "$ip_addr is not in network $network" ;;
        *)
        msg="Command: grepcidr "$network" <(echo "$ip_addr")"
        msg+=$'\n'"Return code: $rc"
        msg+=$'\n'"Output: $buf"
        msg E "$msg"
    esac
    if [[ ! $opt_r_flag && ! $opt_I_flag ]]; then
        re="AllowedIPs = $(echo ${ip_addr//./\\.})[[:space:]]*$"
        grep -Eq "$re" "$server_conffile"
        (($?==0)) && msg E "$ip_addr already in $server_conffile"
    fi
    
    # Set traps
    # ~~~~~~~~~
    for ((i=1;i<${#sig_names[*]};i++))
    do   
        ((i==9)) && continue     # SIGKILL
        ((i==17)) && continue    # SIGCHLD
        trap "finalise $((128+i))" ${sig_names[i]#SIG}
    done

    # Create temporary directory
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~
    # If the mktemp template is changed, tmp_dir_regex in the finalise function
    # must be changed to suit
    buf=$(mktemp -d "/tmp/$my_name.XXXXXX" 2>&1)
    if (($?==0)); then 
        tmp_dir=$buf
        tmp_dir_created_flag=$true
        chmod 700 "$tmp_dir" 
    else
        msg E "Unable to create temporary directory:$buf" 
    fi

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function initialise

#--------------------------
# Name: install_client
# Purpose: installs and confs the client
#--------------------------
function install_client {
    fct "${FUNCNAME[0]}" 'started'
    local buf cmd rc msg
    local -r ssh_opts='-o ConnectTimeout=3 -o LogLevel=quiet -o PasswordAuthentication=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    local -r install_script=/usr/lib/wireguard-kit/install_wireguard_client
    local -r ping_ok_re=', 0% packet loss'
    local -r remote_conf_fn=/etc/wireguard/wg0.conf
    local -r remote_install_script=/tmp/install_wireguard_client
    local -r remote_restart_wireguard_tarball=/tmp/restart_wireguard_on_no_connection.tgz
    local -r restart_wireguard_tarball=/usr/lib/wireguard-kit/restart_wireguard_on_no_connection.tgz
    local -r service_name=wg-quick@wg0.service

    # Is the client accessible via ssh?
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    msg I "Testing root@$fqdn ssh connection (use -n option to skip this test)"
    ssh -q $ssh_opts "root@$fqdn" exit
    if (($?!=0)); then
        msg="Unable to ssh connect using root@$fqdn"
        msg+=$'\n'"Manual installation required using the content of $client_conf_fn"
        msg+=$'\n'"and optionally repository/aurinoco/Wireguard/restart_wireguard_on_no_connection.tgz"
        msg+=$'\n'"Procedure at https://redmine.auroville.org.in/projects/aurinoco/wiki/Wireguard_operations#Debian-Buster-and-later"
        msg+=$'\n'"The -I option can be used to re-try automatic installation"
        msg I "$msg"
        return 0
        fct "${FUNCNAME[0]}" 'returning'
    fi

    # Install client
    # ~~~~~~~~~~~~~~
    msg I "Copying $install_script to $fqdn:$remote_install_script"
    scp -p $ssh_opts $install_script $fqdn:$remote_install_script || msg E "Failed to copy $install_script to $fqdn"
    msg I "Running $install_script on $fqdn"
    ssh $ssh_opts "root@$fqdn" "$remote_install_script" || msg E 'Failed.  Detail above' 
    msg I "Removing $fqdn:$remote_install_script"
    ssh $ssh_opts "root@$fqdn" "rm $remote_install_script" || msg E 'Failed.  Detail above' 

    # Copy conffile to client
    # ~~~~~~~~~~~~~~~~~~~~~~~
    msg I "Conffing Wireguard on $fqdn by copying $client_conf_fn to $remote_conf_fn"
    scp -p $ssh_opts "$client_conf_fn" "root@$fqdn:$remote_conf_fn" || msg E 'Failed to copy conffile'

    # Effect the conf on the client
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    msg I "Enabling $service_name"
    ssh $ssh_opts "root@$fqdn" "systemctl enable $service_name" || msg E 'Failed.  Detail above' 
    msg I "Starting $service_name"
    ssh $ssh_opts "root@$fqdn" "wg-quick down wg0" >/dev/null 2>&1    # In case has been brought up outside systemd
    ssh $ssh_opts "root@$fqdn" "systemctl restart $service_name"
    if (($?!=0)); then
       msg W 'Failed.  Detail above.  Trying to show status' 
       ssh $ssh_opts "root@$fqdn" "systemctl -l status $service_name"
       msg E 'Exiting'
    fi

    # Test the connection on the client
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    cmd=(ssh $ssh_opts "root@$fqdn" "ping -c3 $server_ip_addr")
    msg I "Testing the connection on the client by running ${cmd[*]}"
    buf=$("${cmd[@]}" 2>&1)
    if [[ $buf =~ $ping_ok_re ]]; then
        msg I OK
    else
        msg E "$buf"
    fi

    # Install restart_wireguard_on_no_connection.service
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    msg I "Copying $restart_wireguard_tarball to root@$fqdn:$remote_restart_wireguard_tarball"
    scp -p $ssh_opts $restart_wireguard_tarball root@$fqdn:$remote_restart_wireguard_tarball || msg E 'Failed.  Detail above'
    msg I "Installing restart_wireguard_on_no_connection.service"
    ssh $ssh_opts root@$fqdn tar -xf /tmp/restart_wireguard_on_no_connection.tgz --directory=/ || msg E 'Failed.  Detail above'
    ssh $ssh_opts root@$fqdn systemctl daemon-reload || msg E 'Failed.  Detail above'
    ssh $ssh_opts root@$fqdn systemctl start restart_wireguard_on_no_connection.service || msg E 'Failed.  Detail above'
    ssh $ssh_opts root@$fqdn systemctl enable restart_wireguard_on_no_connection.service || msg E 'Failed.  Detail above'

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function install_client

#--------------------------
# Name: msg
# Purpose: generalised messaging interface
# Arguments:
#    $1 class: D, E, I or W indicating Debug, Error, Information or Warning
#    $2 message text
#    $3 logger control. Optional
#       If "logger" then also send class I messages with logger (to syslog)
#       If "no_logger" then do not also send class  W and E messages with
#       logger (to syslog).
# Global variables read:
#     my_name
# Output: information messages to stdout; the rest to stderr
# Returns: 
#   Does not return (calls finalise) when class is E for error
#   Otherwise returns 0
#--------------------------
function msg {
    local buf class logger_msg message_text prefix priority

    # Process arguments
    # ~~~~~~~~~~~~~~~~~
    class="${1:-}"
    message_text="${2:-}"

    # Class-dependent set-up
    # ~~~~~~~~~~~~~~~~~~~~~~
    logger_flag=$false
    case "$class" in
        D )
            [[ ! $debugging_flag ]] && return
            prefix='DEBUG: '
            priority=
            ;;
        E )
            error_flag=$true
            prefix='ERROR: '
            priority=err
            ;;
        I )
            [[ $quiet ]] && return 0
            prefix=
            priority=info
            ;;
        W )
            warning_flag=$true
            prefix='WARN: '
            priority=warning
            ;;
        * )
            msg E "msg: invalid class '$class': '$*'"
    esac

    # Write to syslog and systemd journal
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unless running interactively or message is debug
    if [[ ${log_fn:-} != /dev/tty
        && ($class = W || $class = E)
    ]]; then
        preamble=$my_name[$my_pid]
        buf=$(logger -t "$preamble" -- "$prefix$message_text" 2>&1)
        [[ $buf != '' ]] \
            && msg I "${FUNCNAME[0]}: problem writing to syslog: $buf"
    fi

    # Write to stdout or stderr
    # ~~~~~~~~~~~~~~~~~~~~~~~~~
    # Which is to log or screen
    message_text="$(date "$log_date_format") $prefix$message_text"
    if [[ $class = I ]]; then
        echo "$message_text"
    else
        echo "$message_text" >&2
        if [[ $class = E ]]; then
            [[ ! $finalising_flag ]] && finalise 1
        fi
    fi

    return 0
}  #  end of function msg

#--------------------------
# Name: usage
# Purpose: prints usage message
#--------------------------
function usage {
    fct "${FUNCNAME[0]}" 'started'
    local msg usage

    # Build the messages
    # ~~~~~~~~~~~~~~~~~~
    usage="usage: $my_name " 
    msg='  where:'
    usage+=' [-c <conffile>] [-d] -f <FQDN> [-h] -i <IP address> [-I] [-l] [-n] [-q]'
    msg+=$'\n    -c names the configuration file. Default '"$conf_fn" 
    msg+=$'\n    -d debugging on'
    msg+=$'\n    -f FQDN of client'
    msg+=$'\n    -h prints this help and exits'
    msg+=$'\n    -i IP address of client'
    msg+=$'\n    -I install on client only.  A re-try.  File /etc/wireguard/clients/<FQDN>.client.conf must exist from an earlier run'
    msg+=$'\n    -l log to /dev/tty'
    msg+=$'\n    -n no install on client'
    msg+=$'\n    -q quiet.  When used with option -l, informational messages are not generated'

    # Display the message(s)
    # ~~~~~~~~~~~~~~~~~~~~~~
    echo "$usage" >&2
    if [[ ${1:-} != 'verbose' ]]; then
        echo "(use -h for help)" >&2
    else
        echo "$msg" >&2
    fi

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function usage

#--------------------------
# Name: main
# Purpose: where it all happens
#--------------------------
initialise "${@:-}" 
if [[ ! $opt_r_flag ]]; then
    [[ ! $opt_I_flag ]] && create_client
    if [[ ! $no_client_install_flag ]]; then
        install_client
    else
        msg="Manual installation required using the content of $client_conf_fn"
        msg+=$'\n'"Procedure at https://redmine.auroville.org.in/projects/aurinoco/wiki/Wireguard_operations"
        msg I "$msg"
    fi
else
    remove_client
fi
finalise 0
