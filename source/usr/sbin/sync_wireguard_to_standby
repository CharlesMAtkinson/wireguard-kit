#!/bin/bash

# Purpose
#   * Run on the WireGuard production server to synchronise to the standby server
#   * Synchronise the /etc/wireguard tree
#   * Optionally
#     - Synchronise /etc/nftables.conf

# Usage: see function usage or use -h option

# Programmers' notes: function call tree
#    +
#    |
#    +-- initialise
#    |   |
#    |   +-- usage
#    |
#    +-- sync
#    |
#    +-- finalise
#
# Utility functions called from various places:
#     ck_file ck_uint fct msg

# Function definitions in alphabetical order.  Execution begins after the last function definition.

#--------------------------
# Name: ck_file
# Purpose: for each file listed in the argument list: checks that it is
#   * reachable and exists
#   * is of the type specified (block special, ordinary file or directory)
#   * has the requested permission(s) for the user
#   * optionally, is absolute (begins with /)
# Usage: ck_file [ path <file_type>:<permissions>[:[a]] ] ...
#   where
#     file  is a file name (path)
#     file_type  is b (block special file), f (file) or d (directory)
#     permissions  is none or more of r, w and x
#     a  requests an absoluteness test (that the path begins with /)
#   Example: ck_file foo d:rwx:
# Outputs:
#   * For the first requested property each file does not have, a message to
#     stderr
#   * For the first detected programminng error, a message to
#     stderr
# Returns:
#   0 when all files have the requested properties
#   1 when at least one of the files have the requested properties
#   2 when a programming error is detected
#--------------------------
function ck_file {

    local absolute_flag buf file_name file_type perm perms retval

    # For each file ...
    # ~~~~~~~~~~~~~~~~~
    retval=0
    while [[ $# -gt 0 ]]
    do
        file_name=$1
        file_type=${2%%:*}
        buf=${2#$file_type:}
        perms=${buf%%:*}
        absolute=${buf#$perms:}
        [[ $absolute = $buf ]] && absolute=
        case $absolute in
            '' | a )
                ;;
            * )
                echo "ck_file: invalid absoluteness flag in '$2' specified for file '$file_name'" >&2
                return 2
        esac
        shift 2

        # Is the file reachable and does it exist?
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        case $file_type in
            b )
                if [[ ! -b $file_name ]]; then
                    echo "file '$file_name' is unreachable, does not exist or is not a block special file" >&2
                    retval=1
                    continue
                fi
                ;;
            f )
                if [[ ! -f $file_name ]]; then
                    echo "file '$file_name' is unreachable, does not exist or is not an ordinary file" >&2
                    retval=1
                    continue
                fi
                ;;
            d )
                if [[ ! -d $file_name ]]; then
                    echo "directory '$file_name' is unreachable, does not exist or is not a directory" >&2
                    retval=1
                    continue
                fi
                ;;
            * )
                echo "Programming error: ck_file: invalid file type '$file_type' specified for file '$file_name'" >&2
                return 2
        esac

        # Does the file have the requested permissions?
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        buf="$perms"
        while [[ $buf ]]
        do
            perm="${buf:0:1}"
            buf="${buf:1}"
            case $perm in
                r )
                    if [[ ! -r $file_name ]]; then
                        echo "$file_name: no read permission" >&2
                        retval=1
                        continue
                    fi
                    ;;
                w )
                    if [[ ! -w $file_name ]]; then
                        echo "$file_name: no write permission" >&2
                        retval=1
                        continue
                    fi
                    ;;
                x )
                    if [[ ! -x $file_name ]]; then
                        echo "$file_name: no execute permission" >&2
                        retval=1
                        continue
                    fi
                    ;;
                * )
                    echo "Programming error: ck_file: invalid permisssion '$perm' requested for file '$file_name'" >&2
                    return 2
            esac
        done

        # Does the file have the requested absoluteness?
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        if [[ $absolute = a && ${file_name:0:1} != / ]]; then
            echo "$file_name: does not begin with /" >&2
            retval=1
        fi

    done

    return $retval

}  #  end of function ck_file

#--------------------------
# Name: ck_uint
# Purpose: checks for a valid unsigned integer
# Usage: ck_uint <putative uint>
# Outputs: none
# Returns:
#   0 when $1 is a valid unsigned integer
#   1 otherwise
#--------------------------
function ck_uint {
    local regex='^[[:digit:]]+$'
    [[ $1 =~ $regex ]] && return 0 || return 1
}  #  end of function ck_uint

#--------------------------
# Name: fct
# Purpose: function call trace (for debugging)
# $1 - name of calling function
# $2 - message.  If it starts with "started" or "returning" then the output is prettily indented
#--------------------------
function fct {

    if [[ ! $debugging_flag ]]; then
        return 0
    fi

    fct_indent="${fct_indent:=}"

    case $2 in
        'started'* )
            fct_indent="$fct_indent  "
            msg D "$fct_indent$1: $2"
            ;;
        'returning'* )
            msg D "$fct_indent$1: $2"
            fct_indent="${fct_indent#  }"
            ;;
        * )
            msg D "$fct_indent$1: $2"
    esac

}  # end of function fct

#--------------------------
# Name: finalise
# Purpose: cleans up and exits
# Arguments:
#    $1  return value
# Return code (on exit):
#   The sum of zero plus
#      1 if any warnings
#      2 if any errors
#      4,8,16 unused
#      32 if terminated by a signal
#--------------------------
function finalise {
    fct "${FUNCNAME[0]}" 'started'
    local body my_exit_code sig_name

    finalising_flag=$true

    # Interrupted?  Message and exit return value
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    my_exit_code=0
    if ck_uint "${1:-}"; then
        if (($1>128)); then    # Trapped interrupt
            interrupt_flag=$true
            i=$((128+${#sig_names[*]}))    # Max valid interrupt code
            if (($1<i)); then
                my_exit_code=$1
                sig_name=${sig_names[$1-128]}
                msg I "Finalising on $sig_name" 
                [[ ${summary_fn:-} != '' ]] \
                    && echo "Finalising on $sig_name" >> "$summary_fn" 
            else
               msg="${FUNCNAME[0]} called with invalid exit value '${1:-}'" 
               msg+=" (> max valid interrupt code $i)" 
               msg E "$msg"    # Returns because finalising_flag is set
            fi
        fi
    fi

    # Exit return value adjustment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ $warning_flag ]]; then
        ((my_exit_code+=1))
    fi
    if [[ $error_flag ]]; then
        ((my_exit_code+=2))
    fi

    # If something went wrong, write to syslog and mail root
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if ((my_exit_code>0)) && [[ ${log_fn:-} != /dev/tty ]]; then
        buf="Exiting with return code $my_exit_code"
        [[ ${log_fn:-} != '' ]] && buf+=$'\n'"Detail in $log_fn"
        logger -i -t "$my_name" "$buf"
        subject="ERROR $my_name"
        echo "$buf" | mailx -s "$subject" root
        msg I 'Mailed root'
    fi  

    # Exit
    # ~~~~
    msg I "Exiting with return code $my_exit_code"
    exit $my_exit_code
}  # end of function finalise

#--------------------------
# Name: initialise
# Purpose: sets up environment, parses command line, reads config file
#--------------------------
function initialise {
    local args args_org buf emsg msg_part opt_c_flag opt_l_flag varname
    local -r fn_date_format='%Y-%m-%d@%H:%M:%S'

    # Configure shell environment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    export LANG=en_GB.UTF-8
    export LANGUAGE=en_GB.UTF-8
    for var_name in LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
        LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
        LC_TELEPHONE LC_TIME
    do
        unset $var_name
    done

    export PATH=/usr/sbin:/sbin:/usr/bin:/bin
    IFS=$' \n\t'
    set -o nounset
    shopt -s extglob            # Enable extended pattern matching operators
    unset CDPATH                # Ensure cd behaves as expected
    umask 022

    # Initialise some global logic variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    readonly false=
    readonly true=true

    debugging_flag=$false
    error_flag=$false
    finalising_flag=$false
    interrupt_flag=$false
    logging_flag=$false
    warning_flag=$false

    # Initialise some global string variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    declare -gr local_fqdn=$(hostname -f)
    declare -gr log_date_format='+%H:%M:%S'
    declare -gr log_retention=28
    declare -gr msg_lf=$'\n    '
    declare -gr my_name=${0##*/}
    declare -gr my_pid=$$
    declare -gr sig_names=(. $(kill -L | sed 's/[[:digit:]]*)//g'))

    declare -gr log_dir=/var/log

    # Set traps
    # ~~~~~~~~~
    for ((i=1;i<${#sig_names[*]};i++))
    do   
        ((i==9)) && continue     # SIGKILL
        ((i==17)) && continue    # SIGCHLD
        trap "finalise $((128+i))" ${sig_names[i]#SIG}
    done

    # Parse command line
    # ~~~~~~~~~~~~~~~~~~
    args=("$@")
    args_org=$args
    conf_fn=/etc/wireguard/$my_name.conf
    emsg=
    opt_c_flag=$false
    opt_l_flag=$false
    while getopts :c:dhl opt "$@"
    do
        case $opt in
            c )
                conf_fn=$OPTARG
                opt_c_flag=$true
                ;;
            d )
                debugging_flag=$true
                ;;
            h )
                debugging_flag=$false
                usage verbose
                exit 0
                ;;
            l )
                opt_l_flag=$true
                log_fn=/dev/tty
                ;;
            : )
                emsg+=$msg_lf"Option $OPTARG must have an argument"
                [[ $OPTARG = c ]] && { opt_c_flag=$true; conf_fn=/bin/bash; }
                ;;
            * )
                emsg+=$msg_lf"Invalid option '-$OPTARG'"
        esac
    done

    # Test for mutually exclusive options
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # There are no mutually exclusive options

    # Test for mandatory options not set
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # There are no mandatory options

    # Test for extra arguments
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    shift $(($OPTIND-1))
    if [[ $* != '' ]]; then
        emsg+=$msg_lf"Invalid extra argument(s) '$*'"
    fi

    # Report any command line errors
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ $emsg != '' ]]; then
        emsg+=$msg_lf'(use -h option for help)'
        msg E "$emsg"
    fi

    # Check the config file
    # ~~~~~~~~~~~~~~~~~~~~~
    buf=$(ck_file "$conf_fn" f:r: 2>&1)
    [[ $buf != '' ]] && msg E "$buf"

    # Set up logging
    # ~~~~~~~~~~~~~~
    if [[ ! $opt_l_flag ]]; then
        # Not logging to /dev/tty so set up logging to file
        log_fn=$log_dir/$my_name.log
        buf=$(touch "$log_fn" 2>&1)
        if (($?>0)); then
            msg E "cannot create $log_fn: $buf"
        fi
    fi
    exec &>>"$log_fn" 
    fct "${FUNCNAME[0]}" 'started (this message delayed until logging set up)'
    msg I "$my_name: PID: $$, PPID: $PPID, args: $args_org" 

    # Read conffile
    # ~~~~~~~~~~~~~
    buf=$(ck_file "$conf_fn" f:r 2>&1)
    [[ $buf != '' ]] && msg E "$buf"
    source "$conf_fn"

    # Error trap the conffile
    # ~~~~~~~~~~~~~~~~~~~~~~~
    emsg=
    for varname in wireguard_conf_dir wireguard_service wireguard_standby_ssh_host
    do
        [[ ${!varname:-} = '' ]] && emsg+=$msg_lf"$varname not set or empty"
    done
    if [[ ${nftables_conf_fn:-} != '' || ${nftables_service:-} != '' ]]; then
        for varname in nftables_conf_fn nftables_service
        do
            [[ ${!varname:-} = '' ]] && emsg+=$msg_lf"$varname not set or empty"
        done
    fi
    [[ $emsg != '' ]] && msg E "$conf_fn: $emsg"

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function initialise

#--------------------------
# Name: msg
# Purpose: generalised messaging interface
# Arguments:
#    $1 class: E, I or W indicating Error, Information or Warning
#    $2 message text
# Global variables read:
#     my_name
# Global variables written:
#     error_flag
#     warning_flag
# Output: information messages to stdout; the rest to stderr
# Returns:
#   Does not return (calls finalise) when class is E for error
#   Otherwise returns 0
#--------------------------
function msg {
    local class level message_text prefix

    # Process arguments
    # ~~~~~~~~~~~~~~~~~
    class="${1:-}"
    message_text="${2:-}"

    # Class-dependent set-up
    # ~~~~~~~~~~~~~~~~~~~~~~
    case "$class" in
        D )
            [[ ! $debugging_flag ]] && return
            prefix='DEBUG: '
            ;;
        E )
            error_flag=$true
            level=err
            prefix='ERROR: '
            ;;
        I )
            prefix=
            level=info
            ;;
        W )
            warning_flag=$true
            level=warning
            prefix='WARN: '
            ;;
        * )
            msg E "msg: invalid class '$class': '$*'"
    esac

    # Write to syslog and systemd journal
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unless running interactively or message is debug
    if [[ ${log_fn:-} != /dev/tty
        && ($class = W || $class = E)
    ]]; then
        preamble=$my_name[$my_pid]
        buf=$(logger -t "$preamble" -- "$prefix$message_text" 2>&1)
        [[ $buf != '' ]] \
            && msg I "${FUNCNAME[0]}: problem writing to syslog: $buf"
    fi

    # Write to stdout or stderr
    # ~~~~~~~~~~~~~~~~~~~~~~~~~
    # Which is to log or screen
    message_text="$(date "$log_date_format") $prefix$message_text"
    if [[ $class = I ]]; then
        echo "$message_text"
    else
        echo "$message_text" >&2
        if [[ $class = E ]]; then
            [[ ! $finalising_flag ]] && finalise 1
        fi
    fi

    # Return or not
    # ~~~~~~~~~~~~~
    if [[ $class = E ]]; then
        [[ ! $finalising_flag ]] && finalise 1
    fi

    return 0
}  #  end of function msg

#--------------------------
# Name: sync
# Purpose:
#    * Synchnonise Wireguard conf from prod to standby
# Usage: sync
# Outputs: none
# Returns:
#   0 when successful.  Does not return on error
#--------------------------
function sync {
    fct "${FUNCNAME[0]}" 'started'
    local buf cmd

    # Wireguard conf
    # ~~~~~~~~~~~~~~
    msg I "Synchronising Wireguard configuration tree $wireguard_conf_dir"
    cmd=(rsync --archive --delete --quiet
        "$wireguard_conf_dir/"
        "$wireguard_standby_ssh_host:$wireguard_conf_dir"
    )
    buf=$("${cmd[@]}" 2>&1)
    [[ $buf != '' ]] && msg E "Output from ${cmd[*]}:$msg_lf$buf"

    # nftables conf
    # ~~~~~~~~~~~~~
    msg I "Synchronising nftables configuration file $nftables_conf_fn"
    cmd=(scp -p {,$wireguard_standby_ssh_host:}$nftables_conf_fn)
    buf=$("${cmd[@]}" 2>&1)
    [[ $buf != '' ]] && msg E "Output from ${cmd[*]}:$msg_lf$buf"

    fct "${FUNCNAME[0]}" 'returning'
    return 0
}  #  end of function sync

#--------------------------
# Name: usage
# Purpose: prints usage message
#--------------------------
function usage {
    fct "${FUNCNAME[0]}" 'started'
    local msg usage

    # Build the messages
    # ~~~~~~~~~~~~~~~~~~
    usage="usage: $my_name [-c conf] [-d] [-h] [-l log]"
    msg='  where:'
    msg+=$'\n    -c configuration file name'
    msg+=$'\n       '"Default: $conf_fn"
    msg+=$'\n    -d debugging on'
    msg+=$'\n    -h prints this help and exits'
    msg+=$'\n    -l log to /dev/tty'
    msg+=$'\n       '"Default: log to file under $log_dir"

    # Display the message(s)
    # ~~~~~~~~~~~~~~~~~~~~~~
    echo "$usage" >&2
    if [[ ${1:-} != 'verbose' ]]; then
        echo "(use -h for help)" >&2
    else
        echo "$msg" >&2
    fi

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function usage

#--------------------------
# Name: main
# Purpose: where it all happens
#--------------------------
initialise "${@:-}"
sync
finalise 0
